{% extends '../CommonAdmin/ListAction/ListBuilderAction.php.twig' %}
{% block pager_adapter -%}
use Pagerfanta\Adapter\DoctrineODMMongoDBAdapter as PagerAdapter;
{% endblock %}
{% block setFilters -%}
    /**
     * Store in the session service the current filters
     *
     * @param array the filters
     */
    protected function setFilters($filters)
    {

        {%- for filter in builder.filters.display -%}
            {%- if 'document' == builder.getFieldGuesser().getDbType(model, filter) or 'collection' == builder.getFieldGuesser().getDbType(model, filter) -%}
            {% set filterModel = builder.getFieldGuesser().getModelType(model, filter) %}
        if (isset($filters['{{ filter }}'])) {
                $filters['{{ filter }}'] = array (
                    'id' => $filters['{{ filter }}']->get{{ builder.getFieldGuesser().getModelPrimaryKeyName(filterModel)|capitalize }}(),
                    'documentName' => '{{ filterModel }}'
                );
        }

            {%- endif %}

        {% endfor -%}

        $this->get('session')->set('{{ namespace_prefix }}\{{ bundle_name }}\{{ builder.BaseGeneratorName }}List\Filters', $filters);
    }
{% endblock %}

{% block getFilters -%}
    /**
     * Get filters from session
     */
    protected function getFilters()
    {
        $filters = $this->get('session')->get('{{ namespace_prefix }}\{{ bundle_name }}\{{ builder.BaseGeneratorName }}List\Filters', array());

        {%- for filter in builder.filters.display -%}
            {%- if 'document' == builder.getFieldGuesser().getDbType(model, filter) or 'collection' == builder.getFieldGuesser().getDbType(model, filter) -%}

        if (isset($filters['{{ filter }}'])) {
                $filters['{{ filter }}'] = $this->getDoctrineMongoDB()->getRepository($filters['{{ filter }}']['documentName'])->find($filters['{{ filter }}']['id']);
        }

            {%- endif %}

        {% endfor -%}

        return $filters;
    }
{% endblock %}
{% block getQuery -%}
    protected function getQuery()
    {
        $query = $this->buildQuery();

        $this->processQuery($query);
        $this->processSort($query);
        $this->processFilters($query);
        $this->processScopes($query);

        return $query;
    }

    protected function buildQuery()
    {
        return $this->getDocumentManager()
                      ->createQueryBuilder('{{ model }}');
    }

{% endblock %}

{% block processSort -%}
    protected function processSort($query)
    {
        $field = $this->getSortColumn();
        $order = $this->getSortOrder();

        if ($field) {
            $queryFilter = $this->getQueryFilter();
            $queryFilter->setQuery($query);
            $queryFilter->setAliasPrefix('o_');
            $queryFilter->setNamePrefix('order_');

            if (in_array($field, $this->getVirtualGettersMap())) {
                $handleSortMethod = 'handle'.$field.'Sort';
                $this->$handleSortMethod($queryFilter, $field, $order);
            } else {
                $queryFilter->sortBy($field, $order);
            }
        }
    }

    {% for column in builder.columns %}
        {% if column.dbType == 'virtual' %}
    /**
     * Add the sort to the query for {{ column.name }}
     *
     * @param QueryFilterInterface  $queryFilter        The queryFilter.
     * @param string                $field              The field.
     * @param string                $order              The sort order.
     */
    protected function handle{{ column.name|classify }}Sort($queryFilter, $field, $order)
    {
    }
        {% endif %}
    {% endfor %}

{% endblock %}

{% block processFilters -%}
    protected function processFilters($query)
    {
        $filtersFormData = $this->getFilters();

        $queryFilter = $this->getQueryFilter();
        $queryFilter->setQuery($query);
        $queryFilter->setAliasPrefix('f_');
        $queryFilter->setNamePrefix('filters_');
        $queryFilter->setFiltersMap($this->getFiltersMap());
        $queryFilter->setPrimaryKeysMap($this->getPrimaryKeysMap());
        $queryFilter->setFieldFormats($this->getFieldFormats());

        $groupParts = array();
        foreach ($filtersFormData as $groupData) {
            $filterParts = array();
            foreach ($groupData as $filterData) {
                $field          = $filterData['field'];
                $operator       = $filterData['operator'];
                $value          = $filterData['value'];

                if (in_array($field, $this->getVirtualGettersMap())) {
                    $handleFilterMethod = 'handle'.$field.'Filter';
                    $filterParts[] = $this->$handleFilterMethod($queryFilter, $field, $operator, $value);
                } else {
                    $param = $queryFilter->getUniqueName();
                    $filterParts[] = $queryFilter->getComparison($field, $operator, $param);
                    $query->setParameter($param, $queryFilter->formatValue($field, $operator, $value));
                }
                
            }
            // for a group to be true, all partial conditions must be true
            $groupParts[] = $queryFilter->getConjunction($filterParts);
        }

        if (count($filtersFormData) > 0) {
            // the results must meet conditions of at least one group
            $query->andWhere($queryFilter->getDisjunction($groupParts));
        }
    }

    {% for column in builder.filterColumns %}
        {% if column.dbType == 'virtual' %}
    /**
     * Add the filters to the query for {{ column.name }}
     *
     * @param QueryFilterInterface  $queryFilter       The queryFilter.
     * @param string                $field             The field.
     * @param string                $operator          The operator.
     * @param string                $value             The value.
     * @return \Doctrine\MongoDB\Query\Expr
     */
    protected function handle{{ column.name|classify }}Filter($queryFilter, $field, $operator, $value)
    {
    }
        {% endif %}
    {% endfor %}
    
{% endblock %}

{% block processScopes -%}
    protected function processScopes($query)
    {

    {% if scopes is defined %}
        $scopes = $this->getScopes();

        $queryFilter = $this->getQueryFilter();
        $queryFilter->setQuery($query);
        $queryFilter->setAliasPrefix('s_');
        $queryFilter->setNamePrefix('scopes_');
        $queryFilter->setFiltersMap($this->getFiltersMap());
        $queryFilter->setPrimaryKeysMap($this->getPrimaryKeysMap());
        $queryFilter->setFieldFormats($this->getFieldFormats());

        {% for groupName, group in scopes -%}
            {%- for scopeName, scopeParams in group %}

        if (isset($scopes['{{ groupName }}']) && $scopes['{{ groupName }}'] == '{{ scopeName }}') {
            {% if scopeParams["filters"] is defined -%}
                {%- for filter, filterParams in scopeParams["filters"] -%}
                {%- if filter|is_numeric -%}
                $this->scope{{ filterParams|classify }}($queryFilter);
                {%- else -%}
                $queryFilter->addEqualFilter('{{ filter }}', {{ filterParams|as_php }});
                {%- endif -%}
                {%- endfor -%}
            {%- endif %}

        }
            {% endfor -%}
        {%- endfor %}
    {%- endif %}
    }

    {% if scopes is defined %}
    {% for groupName, group in scopes -%}
        {%- for scopeName, scopeParams in group %}
            {% if scopeParams["filters"] is defined -%}
            {%- for filter, filterParams in scopeParams["filters"] -%}
                {%- if filter|is_numeric -%}
    /**
     * Add the filters to the query for {{ groupName }} => {{ scopeName }}
     *
     * @param $queryFilter The queryFilter.
     */
    protected function scope{{ filterParams|classify }}($queryFilter)
    {
    }

                {%- endif -%}
            {%- endfor -%}
            {%- endif -%}
        {% endfor -%}
    {%- endfor -%}
    {%- endif %}
{% endblock %}

{% block getQueryFilter %}
    /**
     * @return \Admingenerator\GeneratorBundle\QueryFilter\QueryFilterInterface
     */
    protected function getQueryFilter()
    {
        return $this->get('admingenerator.queryfilter.doctrine_odm');
    }
{% endblock %}

{% block getSessionSerializer %}
    /**
     * @return \Admingenerator\GeneratorBundle\SessionSerializer\SessionSerializerInterface
     */
    protected function getSessionSerializer()
    {
        return $this->get('admingenerator.sessionserializer.doctrine_odm');
    }
{% endblock %}
