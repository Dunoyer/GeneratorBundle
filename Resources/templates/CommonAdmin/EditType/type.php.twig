{% block type %}
<?php

namespace Admingenerated\{{ namespace_prefix }}{{ bundle_name }}\Form\Base{{ builder.BaseGeneratorName }}Type;

use Admingenerator\GeneratorBundle\Form\BaseType;
use Symfony\Component\Form\FormBuilderInterface;
use JMS\SecurityExtraBundle\Security\Authorization\Expression\Expression;
use {{ namespace_prefix }}\{{ bundle_name }}\Form\Type\{{ builder.BaseGeneratorName }}\Options;

class {{ builder.YamlKey|ucfirst }}Type extends BaseType
{
    protected $securityContext;

    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->setGroups($options['groups']);
        
    {% for column in builder.columns %}
        if ($this->isDisplayed{{ column.name|classify }}()) {
            $builder->add('{{ column.name }}', $this->getType{{ column.name|classify }}(), $this->getOptions{{ column.name|classify }}());
        }

    {% endfor %}
    }

{% for column in builder.columns %}
    /**
     * Get form type for {{ column.name }} field.
     *
     * @return string|FormTypeInterface Field form type.
     */
    protected function getType{{ column.name|classify }}()
    {
        return $this->injectSecurityContext({{ column.formType|as_php|convert_as_form(column.formType) }});
    }

    /**
     * Get options for {{ column.name }} field.
     *
     * @return array Field options.
     */
    protected function getOptions{{ column.name|classify }}()
    {
        return $this->resolveOptions('{{ column.name }}', {{ column.formOptions|merge({
            'label': column.label,
            'translation_domain': i18n_catalog|default('Admin')
        })|as_php|convert_as_form(column.formType) }}, $options, new Options());
    }

    /**
     * Check groups for {{ column.name }} field.
     *
     * @return boolean
     */
    protected function isDisplayed{{ column.name|classify }}()
    {
        return $this->checkGroups({{ column.groups|as_php }});
    }

{% endfor %}

    public function getName()
    {
        return '{{ builder.YamlKey }}_{{ builder.ModelClass|lower }}';
    }
}
{% endblock %}
