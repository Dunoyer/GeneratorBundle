{% block type %}
<?php

namespace Admingenerated\{{ namespace_prefix }}{{ bundle_name }}\Form\Base{{ builder.BaseGeneratorName }}Type;

use Admingenerator\GeneratorBundle\Form\BaseType;
use Symfony\Component\OptionsResolver\OptionsResolverInterface;

class {{ builder.YamlKey|ucfirst }}Type extends BaseType
{
    public function setDefaultOptions(OptionsResolverInterface $resolver)
    {
        $resolver->setDefaults(array(
            'groups' => array(),
            'prototype' => true,
            'options'   => array(
                // options for FilterGroupType
                'fields'                => $this->getFieldsHash(),
                'translation_domain'    => {{ i18n_catalog|default('Admin')|as_php }},
                'options' => array(
                    // options for FilterItemType
                    'filters'               => $this->getFilters(),
                    'translation_domain'    => {{ i18n_catalog|default('Admin')|as_php }},
                )
            ),
            'translation_domain' => {{ i18n_catalog|default('Admin')|as_php }}
        ));

        $resolver->setAllowedTypes(array(
            'groups' => 'array',
        ));
    }

    /**
     * @return  array A hash of field name and label pairs.
     */
    protected function getFieldsHash()
    {
        return array_map(function($filter){
            return $filter['label'];
        }, $this->getFilters());
    }

    /**
     * @return array
     */
    protected function getFilters()
    {
        $filters = array();

        {% for column in builder.columns %}
        if ($this->isDisplayed{{ column.name|classify }}()) {
            $filters['{{ column.name }}'] = $this->getFilter{{ column.name|classify }}();
        }
        {% endfor %}

        return $filters;
    }

{% for column in builder.columns %}
    /**
     * Check groups for {{ column.name }} field.
     *
     * @return boolean
     */
    protected function isDisplayed{{ column.name|classify }}()
    {
        return $this->checkGroups({{ column.groups|as_php }});
    }

    /**
     * Get filter for {{ column.name }} field.
     *
     * @return array 
     */
    protected function getFilter{{ column.name|classify }}()
    {
        $optionsClass = '{{ namespace_prefix }}\{{ bundle_name }}\Form\Type\{{ builder.BaseGeneratorName }}\Options';
        $options = class_exists($optionsClass) ? new $optionsClass() : null;

        {% set optionsHash = { 'label': column.label, 'translation_domain': i18n_catalog|default('Admin') } %}
        return array(
            'field'   => {{ column.name|as_php }},
            'label'   => {{ column.label|as_php }},
            'filter'  => {{ column.filterType|as_php }},
            'form'    => $this->checkFieldType({{ column.formType|as_php|convert_as_form(column.formType) }}),
            'options' => $this->resolveOptions(
                {{ column.name|as_php }},
                {{ column.formOptions|merge(optionsHash)|as_php|convert_as_form(column.formType) }},
                array(),
                $options
            )
        );
    }

{% endfor %}
    
    /**
     * Check filter field type
     * 
     * @param  string|FormTypeInterface $fieldType Field type.
     * @throws \LogicException If $fieldType is an object.
     * @return string|FormTypeInterface Field type.
     */
    protected function checkFieldType($fieldType)
    {
        if (is_object($fieldType)) {
            throw new \LogicException("Custom form types are not implemented in filters form.");
        }

        return $fieldType;
    }
    
    public function getParent()
    {
        return 'admingenerator_filter_root';
    }

    public function getName()
    {
        return '{{ builder.YamlKey }}_{{ builder.ModelClass|lower }}';
    }

}
{% endblock %}
