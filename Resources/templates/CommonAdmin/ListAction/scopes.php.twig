{% block scopes %}
    public function scopesAction()
    {
        if ($this->get('request')->get('reset')) {
            $this->setScopes(array());

            return new RedirectResponse($this->getListUrl());
        }

        $this->setScope($this->get('request')->get('group'), $this->get('request')->get('scope'));

        return new RedirectResponse($this->getListUrl());
    }

    /**
     * Store in the session service the current scopes
     *
     * @param array the scopes
     */
    protected function setScopes($scopes)
    {
        if (!$scopes) {
            $this->get('session')->remove($this->getSessionPrefix().'List\Scopes');
        } else {
            $this->get('session')->set($this->getSessionPrefix().'List\Scopes', $scopes);
        }
    }

    /**
    * Change the value of one Scope
    *
    * @param string the group name
    * @param string the scope name
    */
    protected function setScope($groupName, $scopeName)
    {
        $scopes = $this->getScopes();
        $scopes[strtolower($groupName)] = strtolower($scopeName);
        $this->setScopes($scopes);

        $filters = array();
        foreach ($this->getScopes() as $scopeGroupName => $scopeName) {
            $filters += $this->getScopeFilters($scopeGroupName);
        }
        $this->setFilters($filters);

    }

    protected function getScopes()
    {
        return $this->get('session')->get($this->getSessionPrefix().'List\Scopes', $this->getDefaultScopes());
    }

    protected function getDefaultScopes()
    {
        $scopes = array();

        {% if scopes is defined -%}
        {%- for groupName, group in scopes %}
        $scopes['{{ groupName|classify|lower }}'] = '';

        {% for scopeName, params in group -%}
            {%- if params["default"] is defined %}
            $scopes['{{ groupName|classify|lower }}'] = '{{ scopeName|classify|lower }}';
            {% endif -%}
        {%- endfor -%}
        {%- endfor -%}
        {%- endif %}

        return $scopes;
    }

    /*
    * @return string|null the scope setted for the current group
    */
    protected function getScope($groupName)
    {
        $groupName = strtolower($groupName);
        $scopes = $this->getScopes();

        return isset($scopes[$groupName]) ? $scopes[$groupName] : null ;
    }

    /**
     * @return array the filters for the $groupName scope
     */
    protected function getScopeFilters($groupName)
    {
        if (!$scope = $this->getScope($groupName)) {
            return array();
        }

        $groupName = strtolower($groupName);
        $filters = array();

        {% for groupName, group in scopes -%}
            {%- for scopeName, params in group %}
                if ('{{ scopeName|classify|lower }}' === $scope) {
                {% if params["filters"] is defined -%}
                    {%- for filter, filterParams in params["filters"] -%}
                        {%- if not filter|is_numeric -%}
                            $filters['{{ filter }}'] = '{{ filterParams }}';
                        {%- endif -%}
                    {%- endfor -%}
                {%- endif %}

                }
            {% endfor -%}
        {%- endfor %}

        return $filters;
    }
{% endblock %}
